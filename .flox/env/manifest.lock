{"lockfile-version":0,"manifest":{"hook":{"script":"\tgit submodule update --init\n\n\t# Virtual environments\n\t#\n\t# we should not have to do this, flox should set\n\t# up Python so that pip installs packages into\n\t# a directory inside ~/.flox/run/ by default\n\t#\n\t# why have a virtual python environment inside\n\t# a flox environment? we've already got plenty\n\t# of filesystem isolation and path management\n\t# to go around\n\n        if [ ! -d venv ]; then\n                echo \"Creating virtual environment\"\n                python -m venv venv\n        fi\n        echo; echo \"Activating virtual environment\"\n        . venv/bin/activate\n\n\n\t# Specialized package handling\n\t#\n\t# in this situation we need a very specific\n\t# version of pytorch - only the nightly builds\n\t# contain hardware support for M1/M2 macs now\n\t#\n\t# there should be a way for me to do this from\n\t# the flox manifest.\n\n        pip3 -qq install --pre torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu\n\n\n\t# Standard package handling\n\t#\n\t# we should not have to do this either! if there\n\t# is a requirements.txt, the packages inside it\n\t# should be installed into the flox environment\n\t# when 'flox init' is run\n\t#\n\t# sometimes this has a suffix like requirements-foo.txt\n\t# so 'flox init' should make some effort to look\n\t# for it and load the manifest with its alternate\n\t# location. the name is mere convention.\n\t#\n\t# we should consider also running this every time\n\t# the environment is activated...or at least notify\n\t# users when it needs to be run by them manually\n\n        pip3 -qq install -r requirements.txt\n\n\n\t# Running the service\n\t#\n\t# I was really, really, really tempted to just run\n\t# the service here, but that means every time I\n\t# need to tweak something I have to come in here\n\t# and disable it so I can get a \"dev shell\"\n\t#\n\t# this solution works until we have service mgmt\n\n\techo; echo \"All set, type 'start' to run the interface\"\n\talias start=\"python main.py\"\n\n"},"install":{"python3":null},"registry":{"defaults":{"subtrees":null},"inputs":{"nixpkgs":{"from":{"owner":"NixOS","ref":"release-23.05","repo":"nixpkgs","type":"github"},"subtrees":["legacyPackages"]}},"priority":["nixpkgs"]}},"packages":{"aarch64-darwin":{"python3":{"attr-path":["legacyPackages","aarch64-darwin","python3"],"info":{"broken":false,"license":"Python-2.0","pname":"python3","unfree":false,"version":"3.10.13"},"input":{"attrs":{"lastModified":1702497831,"narHash":"sha256-Ql1z0XKrvhYK6WnMPKqcWHbz3WojsNd+XxwAlBT5Exo=","owner":"NixOS","repo":"nixpkgs","rev":"aea734f272cf3d3fc562df752ae8d2dd5543402e","type":"github"},"fingerprint":"67439f586dae8dc2b5687b0c13233f7a9f42f31f329a2ba2bcca0d6ab829aefe","url":"github:NixOS/nixpkgs/aea734f272cf3d3fc562df752ae8d2dd5543402e"},"priority":5}}},"registry":{"defaults":{"subtrees":null},"inputs":{"nixpkgs":{"from":{"lastModified":1702497831,"narHash":"sha256-Ql1z0XKrvhYK6WnMPKqcWHbz3WojsNd+XxwAlBT5Exo=","owner":"NixOS","repo":"nixpkgs","rev":"aea734f272cf3d3fc562df752ae8d2dd5543402e","type":"github"},"subtrees":["legacyPackages"]}},"priority":["nixpkgs"]}}